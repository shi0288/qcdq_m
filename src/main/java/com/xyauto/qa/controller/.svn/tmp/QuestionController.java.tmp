package com.xyauto.qa.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.xyauto.qa.cons.CommonCons;
import com.xyauto.qa.cons.ViewKeyCons;
import com.xyauto.qa.core.annotation.TransKey;
import com.xyauto.qa.service.cloud.AssistService;
import com.xyauto.qa.service.cloud.CarService;
import com.xyauto.qa.service.cloud.QuestionService;
import com.xyauto.qa.util.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * Created by shiqm on 2017/3/9.
 */

@Controller
public class QuestionController extends BaseController {


    @Autowired
    private QuestionService questionService;

    @Autowired
    private AssistService assistService;

    @Autowired
    private TemplateUtils templateUtils;

    @Autowired
    private CitySessionUtil citySessionUtil;

    @Autowired
    private UserAgentUtil userAgentUtil;

    @Autowired
    private CarService carService;


    /**
     * 问题列表加载的数据
     *
     * @param map
     * @return
     */
    @RequestMapping("/issues")
    String issues(ModelMap map, String category_id, String category_name, String series_id, String series_name, String subject) {
        Result result = null;
        if (StringUtils.isEmpty(subject)) {
            result = JSON.parseObject(questionService.getPageRecentQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, category_id, series_id), Result.class);
        } else {
            result = JSON.parseObject(questionService.getPageSubjectQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, subject), Result.class);
        }
        DateCalUtil.transTimestamp(result.getData(), true);
        map.addAttribute("questionRes", result.getData());
        ResultArr resultArr = JSON.parseObject(questionService.getCategoryList(), ResultArr.class);
        map.addAttribute("categoryRes", resultArr.getData());
        map.addAttribute("category_id", category_id);
        map.addAttribute("category_name", category_name);
        map.addAttribute("series_id", series_id);
        map.addAttribute("subject", subject);
        if (!StringUtils.isEmpty(series_id)) {
            result = JSON.parseObject(questionService.getSeriesDesc(series_id), Result.class);
            if (result.getData() != null && result.getData().containsKey("name")) {
                String name = result.getData().getString("name");
                map.addAttribute("series_name", name);
            }
        }
        //获取品牌列表
        result = JSON.parseObject(questionService.getBrandList(), Result.class);
        map.addAttribute("brandRes", result.getData());
        return "wenda_issues";
    }

    /**
     * 进入问题页面
     *
     * @param question_id
     * @return
     */
    @RequestMapping("/answer")
    ModelAndView answer(HttpServletRequest request, String question_id,String msg_id) {
        if (!userAgentUtil.mobileRequest(request)) {
            ModelAndView map = new ModelAndView("redirect:" + userAgentUtil.PC_QUESTION_DETAIL + question_id);
            return map;
        }
        question_id = assistService.getRealQuestionId(question_id);
        Result result = JSON.parseObject(questionService.getQuestionDesc(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID),msg_id), Result.class);
        if (result.getData() == null) {
            ModelAndView map = new ModelAndView("redirect:/delete");
            return map;
        }
        DateCalUtil.transTimestampObj(result.getData(), true);
        ModelAndView map = new ModelAndView("wenda_answer");
        map.addObject("question", result.getData());
        result = JSON.parseObject(questionService.getPageQuestionAnswerList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), Result.class);
        DateCalUtil.transTimestamp(result.getData(), false);
        map.addObject("answerRes", result.getData());
        //获取省份
        result = JSON.parseObject(assistService.getProvinceList(), Result.class);
        map.addObject("provinceRes", result.getData());
        //每次定位
        citySessionUtil.resetCity(request);
        logger.info("=============开始转向问题详情页面");
        return map;
    }


    /**
     * Ajax获取问题翻页的最新问题数据
     *
     * @param page
     * @return
     */
    @RequestMapping(value = "getIssuesQuestion", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getIssuesQuestion(int page, String category_id, String series_id, String subject) {
        Result result = null;
        if (StringUtils.isEmpty(subject)) {
            result = JSON.parseObject(questionService.getPageRecentQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, page, category_id, series_id), Result.class);
        } else {
            result = JSON.parseObject(questionService.getPageSubjectQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, subject), Result.class);
        }
        DateCalUtil.transTimestamp(result.getData(), true);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.INDEX_QUESTION, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }


    /**
     * Ajax根据品牌ID获取车系
     *
     * @param brand_id
     * @return
     */
    @RequestMapping(value = "getSeries", method = RequestMethod.POST)
    @ResponseBody
    String getSeriesListByBrandId(String brand_id) {
        ResultArr resultArr = JSON.parseObject(questionService.getSeriesListByBrandId(brand_id), ResultArr.class);
        return resultArr.getData().toString();
    }


    /**
     * Ajax根据品牌ID获取车系
     *
     * @param brand_id
     * @return
     */
    @RequestMapping(value = "getRSeries", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getRSeriesListByBrandId(String brand_id) {
        JSONObject jsonObject = JSON.parseObject(carService.getCarmaster(brand_id));
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.SERIES_LIST, jsonObject.getJSONObject("data"));
        return jsonResult;
    }

    /**
     * Ajax根据品牌ID获取车系
     *
     * @param series_id
     * @return
     */
    @RequestMapping(value = "getRCars", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getRCars(String series_id) {
        JSONObject jsonObject = JSON.parseObject(carService.getHotmaster(series_id));
        List<JSONObject> collection = JSONObject.parseArray(jsonObject.getJSONObject("data").getString("datas"), JSONObject.class);
        Collections.sort(collection, new CarCompare());
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.CAR_LIST, collection);
        return jsonResult;
    }


    /**
     * 通过问题ID获取回复列表
     *
     * @param page
     * @param question_id
     * @return
     */
    @TransKey
    @RequestMapping(value = "getAnswersByQuestionId", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getAnswersByQuestionId(int page, @TransKey String question_id) {
        Result result = JSON.parseObject(questionService.getPageQuestionAnswerList(CommonCons.Page_Flag.PAGE_LIMIT, page, question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), Result.class);
        DateCalUtil.transTimestamp(result.getData(), false);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.ANSWER_LIST, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }


    /**
     * Ajax 添加 删除收藏
     *
     * @param question_id
     * @param checked
     * @return
     */
    @TransKey
    @RequestMapping(value = "addFavorite", method = RequestMethod.POST)
    @ResponseBody
    String addFavorite(@TransKey String question_id, Boolean checked) {
        Result result;
        if (checked) {
            result = JSON.parseObject(questionService.favoriteQuestion(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), Result.class);
        } else {
            result = JSON.parseObject(questionService.unFavoriteQuestion(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), Result.class);
        }
        return String.valueOf(result.getCode());
    }


    /**
     * Ajax 添加 删除攒
     *
     * @param answer_id
     * @param checked
     * @return
     */
    @RequestMapping(value = "addAgree", method = RequestMethod.POST)
    @ResponseBody
    String addAgree(String answer_id, Boolean checked) {
        ResultData result;
        if (checked) {
            result = JSON.parseObject(questionService.agreeAnswer(answer_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), ResultData.class);
        } else {
            //如果未登录则不进行删除赞
            if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
                //约定10001为未登录状态，不在进行继续点赞的页面变化
                return "10001";
            } else {
                result = JSON.parseObject(questionService.unAgreeAnswer(answer_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), ResultData.class);
            }
        }
        return String.valueOf(result.getCode());
    }


    /**
     * 举报问题
     *
     * @param question_id
     * @param reason
     * @return
     */
    @TransKey
    @RequestMapping(value = "reportQuestion", method = RequestMethod.POST)
    @ResponseBody
    String reportQuestion(@TransKey String question_id, String reason) {
        ResultData result = JSON.parseObject(questionService.reportQuestion(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), reason), ResultData.class);
        return String.valueOf(result.getCode());
    }


    /**
     * 删除回复
     *
     * @return
     */
    @RequestMapping(value = "delAnswer", method = RequestMethod.POST)
    @ResponseBody
    String delAnswer(String answer_id) {
        ResultData result = JSON.parseObject(questionService.delAnswer(answer_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), ResultData.class);
        return String.valueOf(result.getCode());
    }


    /**
     * 删除问题
     *
     * @return
     */
    @RequestMapping(value = "delQuestion", method = RequestMethod.POST)
    @ResponseBody
    @TransKey
    String delQuestion(@TransKey String question_id) {
        ResultData result = JSON.parseObject(questionService.delQuestion(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), ResultData.class);
        return String.valueOf(result.getCode());
    }


    /**
     * 举报回复
     *
     * @param answer_id
     * @param reason
     * @return
     */
    @RequestMapping(value = "reportAnswer", method = RequestMethod.POST)
    @ResponseBody
    String reportAnswer(String answer_id, String reason) {
        ResultData result = JSON.parseObject(questionService.reportAnswer(answer_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), reason), ResultData.class);
        return String.valueOf(result.getCode());
    }


}
