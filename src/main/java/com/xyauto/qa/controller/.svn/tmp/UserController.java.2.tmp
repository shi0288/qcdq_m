package com.xyauto.qa.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.xyauto.qa.cons.CommonCons;
import com.xyauto.qa.cons.ViewKeyCons;
import com.xyauto.qa.core.annotation.TransKey;
import com.xyauto.qa.service.cloud.AssistService;
import com.xyauto.qa.service.cloud.CarService;
import com.xyauto.qa.service.cloud.QuestionService;
import com.xyauto.qa.service.cloud.UserService;
import com.xyauto.qa.util.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * Created by shiqm on 2017/3/9.
 */


@Controller
public class UserController extends BaseController {

    @Autowired
    private UserService userService;

    @Autowired
    private QuestionService questionService;

    @Autowired
    private AssistService assistService;

    @Autowired
    private TemplateUtils templateUtils;

    @Autowired
    private ImageHelper imageHelper;

    @Autowired
    private CitySessionUtil citySessionUtil;

    @Autowired
    private UserAgentUtil userAgentUtil;

    @Autowired
    private CarService carService;


    /**
     * 根据用户ID进入用户详情页
     *
     * @param uid
     * @return
     */
    @RequestMapping("/user")
    String userDesc(HttpServletRequest request, ModelMap map, String uid) {

        if (!userAgentUtil.mobileRequest(request)) {
            return "redirect:" + userAgentUtil.PC_EXPERT + uid;
        }
        //获取用户信息
        if (uid == null) {
            if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
                // 未登录 跳入登录页
                return "redirect:" + CommonCons.Config_Flag.URL_LOGIN;
            } else {
                uid = this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID);
            }
        }
        //增加判断是否点击的用户自己的信息
        boolean whois = false;
        if (!this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            if (uid.equals(this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID))) {
                whois = true;
            }
        }

        Result result = JSON.parseObject(userService.getUserDesc(uid), Result.class);
        JSONObject userObj = result.getData();
        map.addAttribute("user", userObj);

        //获取省份
        result = JSON.parseObject(assistService.getProvinceList(), Result.class);
        map.addAttribute("provinceRes", result.getData());
        //每次定位
        citySessionUtil.resetCity(request);

        //获取问题
        result = JSON.parseObject(questionService.getPageUserQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER,this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID) ,uid), Result.class);
        DateCalUtil.transTimestamp(result.getData(), true);
        map.addAttribute("userQuestion", result.getData());
        int userType = userObj.getInteger("type");
        int is_official = userObj.getInteger("is_official");

        if (whois) {
            //获取回答
            result = JSON.parseObject(questionService.getPageUserAnswerList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), uid), Result.class);
            DateCalUtil.transTimestamp(result.getData(), false);
            map.addAttribute("userAnswer", result.getData());
            //增加官方人员
            if (is_official == 1) {
                result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                DateCalUtil.transTimestamp(result.getData(), true);
                map.addAttribute("userFavorite", result.getData());
                return "mywenda_guanfang";
            }
            switch (userType) {
                //专家详情
                case CommonCons.User_Type_Flag.USER_TYPE_EXPERT:
                    //获取关注
                    result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userFavorite", result.getData());
                    //获取待解决
                    result = JSON.parseObject(questionService.getPageUserSpecialList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userSpecial", result.getData());
                    return "mywenda_zhuanjia";
                //标兵详情
                case CommonCons.User_Type_Flag.USER_TYPE_EXAMPLE:
                    //获取关注
                    result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userFavorite", result.getData());
                    //获取待解决
                    result = JSON.parseObject(questionService.getPageUserSpecialList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userSpecial", result.getData());
                    return "mywenda_biaobing";
                //车顾问详情
                case CommonCons.User_Type_Flag.USER_TYPE_ADVISER:
                    //获取关注
                    result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userFavorite", result.getData());
                    //获取待解决
                    result = JSON.parseObject(questionService.getPageUserSpecialList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userSpecial", result.getData());
                    return "mywenda_guwen";
                //其余进普通详情
                default:
                    //获取关注
                    result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, uid), Result.class);
                    DateCalUtil.transTimestamp(result.getData(), true);
                    map.addAttribute("userFavorite", result.getData());
                    return "mywenda_putong";
            }
        } else {
            //获取回答
            result = JSON.parseObject(questionService.getPageUserAnswerList(CommonCons.Page_Flag.PAGE_LIMIT, CommonCons.Page_Flag.PAGE_NUMBER, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), uid), Result.class);
            DateCalUtil.transTimestamp(result.getData(), false);
            map.addAttribute("userAnswer", result.getData());
            //增加官方人员
            if (is_official == 1) {
                return "hiswenda_guanfang";
            }
            switch (userType) {
                //专家详情
                case CommonCons.User_Type_Flag.USER_TYPE_EXPERT:
                    return "hiswenda_zhuanjia";
                //标兵详情
                case CommonCons.User_Type_Flag.USER_TYPE_EXAMPLE:
                    return "hiswenda_biaobing";
                //车顾问详情
                case CommonCons.User_Type_Flag.USER_TYPE_ADVISER:
                    return "hiswenda_guwen";
                //其余进普通详情
                default:
                    return "hiswenda_putong";
            }
        }
    }



    /**
     * 排行榜
     */
    @RequestMapping(value = "/rank")
    String enlist(ModelMap map) {
        if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            // 未登录 跳入登录页
            return "redirect:" + CommonCons.Config_Flag.URL_LOGIN_RANK;
        }
        Result result = JSON.parseObject(userService.getUserDesc(this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID)), Result.class);
        JSONObject userObj = result.getData();
        map.addAttribute("user", userObj);
        ResultArr resultArr = JSON.parseObject(questionService.yesterdayRank("1"), ResultArr.class);
        map.addAttribute("biaoRank", resultArr.getData());
        System.out.println(resultArr.getData());
        resultArr = JSON.parseObject(questionService.yesterdayRank("2"), ResultArr.class);
        map.addAttribute("expertRank", resultArr.getData());
        System.out.println(resultArr.getData());
        return "wenda_rank";
    }

    /**
     * 进入专家列表
     */
    @RequestMapping(value = "/experts")
    String goExpertsList(ModelMap map) {
        ResultArr resultArr = JSON.parseObject(userService.getHomeExperts(), ResultArr.class);
        map.addAttribute("expertsRes", resultArr.getData());
        Result result = JSON.parseObject(
                userService.getPageUserList(
                        CommonCons.Page_Flag.PAGE_NUMBER,
                        CommonCons.Page_Flag.PAGE_LIMIT_EXPERT,
                        CommonCons.User_Type_Flag.USER_TYPE_EXPERT), Result.class);
        map.addAttribute("userRes", result.getData());
        return "wenda_zhuanjialist";
    }

    /**
     * 进入提问页面
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/publish")
    String publish(ModelMap map, HttpServletRequest request, String special_id, String series_id, String type) {
        if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            //未登录
            if (!StringUtils.isEmpty(special_id)) {
                return "redirect:" + CommonCons.Config_Flag.URL_LOGIN_PUBLIC + "?special_id=" + special_id;
            }
            if (!StringUtils.isEmpty(type)) {
                return "redirect:" + CommonCons.Config_Flag.URL_LOGIN_PUBLIC + "?type=" + type;
            }
            return "redirect:" + CommonCons.Config_Flag.URL_LOGIN_PUBLIC;
        }
        //获取品牌
        Result result = JSON.parseObject(questionService.getBrandList(), Result.class);
        map.addAttribute("brandRes", result.getData());
        //获取类型
        ResultArr resultArr = JSON.parseObject(questionService.getCategoryList(), ResultArr.class);
        map.addAttribute("categoryRes", resultArr.getData());
        if (special_id != null) {
            //当指向专家提问时
            result = JSON.parseObject(userService.getUserDesc(special_id), Result.class);
            map.addAttribute("special_user", result.getData());
        }
        //获取省份
        result = JSON.parseObject(assistService.getProvinceList(), Result.class);
        map.addAttribute("provinceRes", result.getData());
        //获取话题
        result = JSON.parseObject(assistService.getHomeBannerList(CommonCons.Block_Flag.POPULAR_TOPIC), Result.class);
        map.addAttribute("popularRes", result.getData());

        if (!StringUtils.isEmpty(series_id)) {
            result = JSON.parseObject(questionService.getSeriesDesc(series_id), Result.class);
            map.addAttribute("seriesObj", result.getData());
        }
        if (!StringUtils.isEmpty(type)) {
            map.addAttribute("type", type);
        }
        //每次定位
        citySessionUtil.resetCity(request);
        return "wenda_publish";
    }


    /**
     * 进入发布投票页面
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/vote")
    String vote(ModelMap map, HttpServletRequest request) {
        if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            //未登录
            return "redirect:" + CommonCons.Config_Flag.URL_LOGIN_VOTE;
        }
        //获取品牌
        ResultArr resultBrands = JSON.parseObject(carService.getCarBrand(), ResultArr.class);
        JSONArray brandsArr = JSON.parseArray(resultBrands.getData().toString());
        Map brandMap = new HashMap();
        for (int i = 0; i < brandsArr.size(); i++) {
            JSONObject brandTemp = brandsArr.getJSONObject(i);
            if (brandMap.containsKey(brandTemp.getString("initial"))) {
                JSONArray brandArrTemp = (JSONArray) brandMap.get(brandTemp.getString("initial"));
                brandArrTemp.add(brandTemp);
            } else {
                JSONArray brandArrTemp = new JSONArray();
                brandArrTemp.add(brandTemp);
                brandMap.put(brandTemp.getString("initial"), brandArrTemp);
            }
        }
        map.addAttribute("brandRes", brandMap);
        //获取类型
        ResultArr resultArr = JSON.parseObject(questionService.getCategoryList(), ResultArr.class);
        map.addAttribute("categoryRes", resultArr.getData());
        //获取省份
        Result result = JSON.parseObject(assistService.getProvinceList(), Result.class);
        map.addAttribute("provinceRes", result.getData());
        //获取话题
        result = JSON.parseObject(assistService.getHomeBannerList(CommonCons.Block_Flag.POPULAR_TOPIC), Result.class);
        map.addAttribute("popularRes", result.getData());
        //每次定位
        citySessionUtil.resetCity(request);
        return "wenda_vote";
    }


    /**
     * 创建问题
     *
     * @param category_id
     * @param content
     * @param cars
     * @param special_id
     * @param city_id
     * @param attachs
     * @return
     */
    @RequestMapping(value = "/createQuestion", method = RequestMethod.POST)
    @ResponseBody
    String createQuestion(String category_id, String content, String cars, String special_id, String city_id, String attachs, String voteType, String closeTime, String[] topics, String[] carModes, String type) {
        // 判断用户未登录
        JSONObject jsonObject = new JSONObject();
        if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            jsonObject.put("msg", "账号未登录");
            return jsonObject.toString();
        }
        if (StringUtils.isEmpty(category_id)) {
            jsonObject.put("msg", "问题类型不能为空");
            return jsonObject.toString();
        }
        if (StringUtils.isEmpty(content)) {
            jsonObject.put("msg", "内容不能为空");
            return jsonObject.toString();
        }
        if (content.length() < 10) {
            jsonObject.put("msg", "字数不得少10个");
            return jsonObject.toString();
        }
        if (content.length() > 500) {
            jsonObject.put("msg", "最多输入500字");
            return jsonObject.toString();
        }
        String voteStr = null;
        if (!StringUtils.isEmpty(voteType)) {
            JSONObject dataObj = new JSONObject();
            dataObj.put("type", "vote");
            JSONArray dataArr = new JSONArray();
            dataObj.put("data", dataArr);
            if ("text".equals(voteType)) {
                if (topics == null || topics.length < 2) {
                    jsonObject.put("msg", "观点不能少于两项");
                    return jsonObject.toString();
                }
                for (int i = 0; i < topics.length; i++) {
                    if (topics[i] == null || "".equals(topics[i].replaceAll(" ", ""))) {
                        continue;
                    }
                    JSONObject temp = new JSONObject();
                    temp.put("type", "text");
                    temp.put("text", topics[i]);
                    dataArr.add(temp);
                }
                if (dataArr.size() < 2) {
                    jsonObject.put("msg", "观点不能少于两项");
                    return jsonObject.toString();
                }
            } else {
                if (carModes == null || carModes.length < 2) {
                    jsonObject.put("msg", "车型不能少于两项");
                    return jsonObject.toString();
                }
                for (int i = 0; i < carModes.length; i++) {
                    String[] voteCarArr = carModes[i].split("\\_");
                    JSONObject temp = new JSONObject();
                    temp.put("type", voteCarArr[0]);
                    temp.put("text", voteCarArr[1]);
                    temp.put("id", voteCarArr[2]);
                    dataArr.add(temp);
                }
                if (dataArr.size() < 2) {
                    jsonObject.put("msg", "车型不能少于两项");
                    return jsonObject.toString();
                }
            }
            dataObj.put("expire", closeTime);
            voteStr = dataObj.toJSONString();
        }

        logger.info("提交voteStr:{}", voteStr);

        String strRes = questionService.createQuestionNoPic(category_id, content, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), cars, special_id, city_id, voteStr, attachs, type);
        logger.info("提交问题回传info:{}", strRes);
        Result result = JSON.parseObject(strRes, Result.class);
        if (result.getCode() == 10000) {
            logger.info("提交问题回传info:成功");
            String questionKye = result.getData().getString("key");
            jsonObject.put("code", 10000);
            jsonObject.put("key", questionKye);
            return jsonObject.toString();
        } else {
            logger.info("提交问题回传info:失败");
            jsonObject.put("msg", result.getMsg());
            return jsonObject.toString();
        }
    }


    /**
     * 获取用户问题列表
     *
     * @param page
     * @param uid
     * @return
     */
    @RequestMapping(value = "getUserQuestion", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getUserQuestion(int page, String uid) {
        Result result = JSON.parseObject(questionService.getPageUserQuestionList(CommonCons.Page_Flag.PAGE_LIMIT, page, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID),uid), Result.class);
        DateCalUtil.transTimestamp(result.getData(), true);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.USER_QUESTION, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }

    /**
     * 获取用户回答列表
     *
     * @param page
     * @param uid
     * @return
     */
    @RequestMapping(value = "getUserAnswer", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getUserAnswer(int page, String uid) {
        Result result = JSON.parseObject(questionService.getPageUserAnswerList(CommonCons.Page_Flag.PAGE_LIMIT, page, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), uid), Result.class);
        DateCalUtil.transTimestamp(result.getData(), false);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.USER_ANSWER, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }

    /**
     * 获取用户关注列表
     *
     * @param page
     * @param uid
     * @return
     */
    @RequestMapping(value = "getUserFavorite", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getUserFavorite(int page, String uid) {
        Result result = JSON.parseObject(questionService.getPageUserFavoriteList(CommonCons.Page_Flag.PAGE_LIMIT, page, uid), Result.class);
        DateCalUtil.transTimestamp(result.getData(), true);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.USER_FAVORITE, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }

    /**
     * 获取用户待解决列表
     *
     * @param page
     * @param uid
     * @return
     */
    @RequestMapping(value = "getUserSpecial", method = RequestMethod.POST)
    @ResponseBody
    JSONResult getUserSpecial(int page, String uid) {
        Result result = JSON.parseObject(questionService.getPageUserSpecialList(CommonCons.Page_Flag.PAGE_LIMIT, page, uid), Result.class);
        DateCalUtil.transTimestamp(result.getData(), true);
        JSONResult jsonResult = templateUtils.parse(ViewKeyCons.USER_SPECIAL, result.getData());
        if (jsonResult.isDone()) {
            jsonResult.setCount(result.getData().getInteger("count"));
        }
        return jsonResult;
    }


    /**
     * 创建回复
     *
     * @param question_id
     * @param content
     * @param city_id
     * @param reply_uid
     * @param reply_answer_id
     * @return
     */
    @TransKey
    @RequestMapping(value = "createAnswer", method = RequestMethod.POST)
    @ResponseBody
    String createAnswer(@TransKey String question_id, String content, String city_id, String reply_uid, String reply_answer_id, String attachs, String vote_id) {
        // 判断用户未登录
        JSONObject jsonObject = new JSONObject();
        if (this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID).equals(CommonCons.Status_Flag.OUT_SESSION)) {
            jsonObject.put("msg", "账号未登录");
            return jsonObject.toString();
        }
        if (StringUtils.isEmpty(question_id)) {
            jsonObject.put("msg", "问题ID不能为空");
            return jsonObject.toString();
        }
        if (StringUtils.isEmpty(vote_id)) {
            if (StringUtils.isEmpty(content) && StringUtils.isEmpty(attachs)) {
                jsonObject.put("msg", "内容不能为空");
                return jsonObject.toString();
            }
            if (StringUtils.isEmpty(content.replaceAll("\\s*", "")) && StringUtils.isEmpty(attachs)) {
                jsonObject.put("msg", "内容不能为空");
                return jsonObject.toString();
            }
            if (content.length() > 2000) {
                jsonObject.put("msg", "最多输入2000字");
                return jsonObject.toString();
            }
        }
        String strRes = questionService.createAnswerNoPic(question_id, content, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), city_id, reply_uid, reply_answer_id, vote_id, attachs);
        logger.info("回复问题回传info:{}", strRes);
        Result result = JSON.parseObject(strRes, Result.class);
        if (result.getCode() == 10000) {
            logger.info("回复问题回传info:成功");
            jsonObject.put("code", 10000);
            return jsonObject.toString();
        } else {
            logger.info("回复问题回传info:失败");
            jsonObject.put("msg", result.getMsg());
            return jsonObject.toString();
        }
    }


    @RequestMapping(value = "getVotePercent", method = RequestMethod.POST)
    @ResponseBody
    @TransKey
    JSONObject getVotePercent(@TransKey String question_id) {
        Result result = JSON.parseObject(questionService.getQuestionDesc(question_id, this.getUserIdSession(CommonCons.Session_Flag.SESSION_UID), null), Result.class);
        JSONObject res = new JSONObject();
        if (result.getData() == null) {
            res.put("code", 999);
            res.put("msg", "未获取问题详情");
            return res;
        }
        JSONObject questionObj = result.getData();
        JSONArray voteArray = questionObj.getJSONArray("vote");
        if (voteArray.size() == 1) {
            JSONObject vote = voteArray.getJSONObject(0);
            res.put("data", vote);
        }
        res.put("code", 10000);
        return res;
    }


    /**
     * 上传图片
     *
     * @param file
     * @return
     */
    @RequestMapping(value = "uploadPic", method = RequestMethod.POST)
    @ResponseBody
    String uploadPic(MultipartFile file) {

        logger.info("有文件开始上传");

        if (file == null) {
            JSONObject obj = new JSONObject();
            obj.put("code", 3000);
            return obj.toString();
        }

        logger.info("文件上传请求类型：{}", file.getContentType());

        logger.info("文件上传大小：{}", file.getSize());

        if (file.getSize() > CommonCons.Config_Flag.PICTURE_LIMIT_SIZE) {
            JSONObject obj = new JSONObject();
            obj.put("code", 2999);
            return obj.toString();
        }

        String originalName = file.getOriginalFilename();
        logger.info("文件上传名称：{}", originalName);
        String fileType = imageHelper.getFileExt(originalName);
        logger.info("文件上传type：{}", fileType);
        boolean typeDone = false;
        for (String type : CommonCons.Config_Flag.PICTURE_TYPE) {
            if (type.toUpperCase().equals(fileType.toUpperCase())) {
                typeDone = true;
                break;
            }
        }

        if (!typeDone) {
            logger.info("文件不允许上传");
            JSONObject obj = new JSONObject();
            obj.put("code", 2998);
            return obj.toString();
        }
        logger.info("文件允许上传");
        //校验类型
        File f = null;
        try {
            f = File.createTempFile("tmp", "." + fileType);
            file.transferTo(f);
            //压缩
            imageHelper.scaleImage(f, f, fileType);
            JSONObject obj = JSON.parseObject(assistService.uploadFile(f));
            f.delete();
            logger.info("上传成功");
            return obj.toString();
        } catch (IOException e) {
            return null;
        }
    }


    /**
     * 获取用户待解决列表
     *
     * @param province_id
     * @return
     */
    @RequestMapping(value = "getCityList", method = RequestMethod.POST)
    @ResponseBody
    String getCityList(String province_id) {
        ResultArr resultArr = JSON.parseObject(assistService.getCityListByProvinceId(province_id), ResultArr.class);
        return resultArr.getData().toString();
    }

    /**
     * 记录城市定位
     *
     * @param city_id
     * @param city_name
     * @return
     */
    @RequestMapping(value = "setUserCity", method = RequestMethod.POST)
    @ResponseBody
    String setUserCity(String city_id, String city_name) {
        if (city_id == null) {
            return String.valueOf(false);
        }
        if (city_name == null) {
            return String.valueOf(false);
        }
        this.setSession(CommonCons.Session_Flag.CLIENT_CITY_ID, city_id);
        this.setSession(CommonCons.Session_Flag.CLIENT_CITY, city_name);
        return String.valueOf(true);
    }

}
